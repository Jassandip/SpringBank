package com.springbank.controller;

import org.hibernate.validator.constraints.Mod10Check;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.springbank.beans.Transactions;

import java.util.List;
import java.util.Optional;

import com.springbank.beans.Employee;
import com.springbank.services.EmployeeRepository;
import com.springbank.services.TransactionsRepository;;
@SessionAttributes("id")
@Controller    // This means that this class is a Controller
@RequestMapping(path="/employee") // This means URL's start with /demo (after Application path)
public class EmployeeController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private TransactionsRepository transactionsRepository;
    @Autowired
    private EmployeeRepository employeeRepository;
    
	@GetMapping(path="")
    public String employeeDashboard() {
        // This returns a JSON or XML with the users
        System.out.println("Entered employeDashboard method");
		Employee user = employeeRepository.findById("oop").get();
		return "employee";
    }
	
	@GetMapping(path="/employees")
    public void getAllEmployees() {
        // This returns a JSON or XML with the users
        System.out.println("Entered getAllEmployees method");
		Employee user = employeeRepository.findById("oop").get();
		System.out.println(user.getIntId());
	}
	
	@GetMapping(path="/update")
	public String updateEmployeeInfoPage(Model model){
		Employee user = employeeRepository.findById("oop").get();
		model.addAttribute("firstName",user.getFirstName());
		model.addAttribute("lastName",user.getLastName());
		model.addAttribute("dob",user.getDob());
		return "update";
	}

	@PostMapping(path="/update")
    public String updateEmployeeInfo(@ModelAttribute("eu") Employee eu) {
        // This returns a JSON or XML with the users
		System.out.println("Entered updateEmployeeInfo method");
		Employee user = employeeRepository.findById("oop").get();
		user.setFirstName(eu.getFirstName());
		user.setLastName(eu.getLastName());
		user.setDob(eu.getDob());
		employeeRepository.save(user);
		System.out.println(user.getIntId());
		return "employee";
    }
	@GetMapping(path="/transactions")
	public @ResponseBody Iterable<Transactions> getAllUsers() {
        // This returns a JSON or XML with the users
        System.out.println(transactionsRepository.findAll());
		return transactionsRepository.findAll();
	}
	// public String employee(Model model,@ModelAttribute("id") String id ){
    //     System.out.println(employeeRepository.findAll());
    //     return "employee";
    // }

	// @GetMapping(path="/add") // Map ONLY GET Requests
	// public @ResponseBody String addNewUser (@RequestParam String id
	// 		, @RequestParam Integer amount ) {
	// 	// @ResponseBody means the returned String is the response, not a view name
	// 	// @RequestParam means it is a parameter from the GET or POST request

	// 	Transactions t = new Transactions();
	// 	t.setName(name);
	// 	t.setEmail(email);
	// 	userRepository.save(n);
	// 	return "Saved";
	// }
}